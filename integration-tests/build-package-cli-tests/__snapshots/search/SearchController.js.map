{"version":3,"file":"SearchController.js","sources":["SearchController.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger, isAbortError, throwAbortError } from \"@open-pioneer/core\";\nimport { SearchSource, SearchResult } from \"./api\";\nimport { MapModel } from \"@open-pioneer/map\";\n\nconst LOG = createLogger(\"search:SearchController\");\n\n/**\n * Group of suggestions returned from one source.\n */\nexport interface SuggestionGroup {\n    label: string;\n    source: SearchSource;\n    results: SearchResult[];\n}\n\nconst DEFAULT_SEARCH_TYPING_DELAY = 200;\nconst DEFAULT_MAX_RESULTS_PER_SOURCE = 5;\n\nexport class SearchController {\n    #mapModel: MapModel;\n\n    /**\n     * Search sources defined by the developer.\n     */\n    #sources: SearchSource[] = [];\n\n    /**\n     * Limits the number of results per source.\n     */\n    #maxResultsPerSource: number = DEFAULT_MAX_RESULTS_PER_SOURCE;\n\n    /**\n     * The timeout in millis.\n     */\n    #searchTypingDelay: number = DEFAULT_SEARCH_TYPING_DELAY;\n\n    /**\n     * Cancel or abort a previous request.\n     */\n    #abortController: AbortController | undefined;\n\n    constructor(mapModel: MapModel, sources: SearchSource[]) {\n        this.#mapModel = mapModel;\n        this.#sources = sources;\n    }\n\n    destroy() {\n        this.#abortController?.abort();\n        this.#abortController = undefined;\n    }\n\n    async search(searchTerm: string): Promise<SuggestionGroup[]> {\n        this.#abortController?.abort();\n        this.#abortController = undefined;\n        if (!searchTerm) {\n            return [];\n        }\n\n        const abort = (this.#abortController = new AbortController());\n        try {\n            await waitForTimeOut(abort.signal, this.#searchTypingDelay);\n            if (abort.signal.aborted) {\n                LOG.debug(`search canceled with ${searchTerm}`);\n                throwAbortError();\n            }\n            const settledSearches = await Promise.all(\n                this.#sources.map((source) => this.#searchSource(source, searchTerm, abort.signal))\n            );\n            return settledSearches.filter((s): s is SuggestionGroup => s != null);\n        } finally {\n            if (this.#abortController === abort) {\n                this.#abortController = undefined;\n            }\n        }\n    }\n\n    async #searchSource(\n        source: SearchSource,\n        searchTerm: string,\n        signal: AbortSignal\n    ): Promise<SuggestionGroup | undefined> {\n        const label = source.label;\n        const projection = this.#mapModel.olMap.getView().getProjection();\n        try {\n            const maxResults = this.#maxResultsPerSource;\n            let results = await source.search(searchTerm, {\n                maxResults,\n                signal,\n                mapProjection: projection\n            });\n            if (results.length > maxResults) {\n                results = results.slice(0, maxResults);\n            }\n            return { label, source, results };\n        } catch (e) {\n            if (!isAbortError(e)) {\n                LOG.error(`search for source ${label} failed`, e);\n            }\n            return undefined;\n        }\n    }\n\n    get searchTypingDelay(): number {\n        return this.#searchTypingDelay;\n    }\n\n    set searchTypingDelay(value: number | undefined) {\n        this.#searchTypingDelay = value ?? DEFAULT_SEARCH_TYPING_DELAY;\n    }\n\n    get maxResultsPerSource(): number {\n        return this.#maxResultsPerSource;\n    }\n\n    set maxResultsPerSource(value: number | undefined) {\n        this.#maxResultsPerSource = value ?? DEFAULT_MAX_RESULTS_PER_SOURCE;\n    }\n\n    get sources() {\n        return this.#sources;\n    }\n}\n\n/**\n * wait for timeouts millis or until signal is aborted, whatever happens first\n */\nasync function waitForTimeOut(signal: AbortSignal, timeoutMillis: number) {\n    if (signal.aborted) {\n        return;\n    }\n\n    await new Promise<void>((resolve) => {\n        const done = () => {\n            signal.removeEventListener(\"abort\", done);\n            clearTimeout(timeoutId);\n            resolve();\n        };\n\n        signal.addEventListener(\"abort\", done);\n        const timeoutId = setTimeout(done, timeoutMillis);\n    });\n}\n"],"names":[],"mappings":"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"}