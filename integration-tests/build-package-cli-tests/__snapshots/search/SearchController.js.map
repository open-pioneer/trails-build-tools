{"version":3,"file":"SearchController.js","sources":["SearchController.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger, isAbortError, throwAbortError } from \"@open-pioneer/core\";\nimport { SearchSource, SearchResult } from \"./api\";\nimport { MapModel } from \"@open-pioneer/map\";\n\nconst LOG = createLogger(\"search:SearchController\");\n\n/**\n * Group of suggestions returned from one source.\n */\nexport interface SuggestionGroup {\n    label: string;\n    source: SearchSource;\n    results: SearchResult[];\n}\n\nconst DEFAULT_SEARCH_TYPING_DELAY = 200;\nconst DEFAULT_MAX_RESULTS_PER_SOURCE = 5;\n\nexport class SearchController {\n    #mapModel: MapModel;\n\n    /**\n     * Search sources defined by the developer.\n     */\n    #sources: SearchSource[] = [];\n\n    /**\n     * Limits the number of results per source.\n     */\n    #maxResultsPerSource: number = DEFAULT_MAX_RESULTS_PER_SOURCE;\n\n    /**\n     * The timeout in millis.\n     */\n    #searchTypingDelay: number = DEFAULT_SEARCH_TYPING_DELAY;\n\n    /**\n     * Cancel or abort a previous request.\n     */\n    #abortController: AbortController | undefined;\n\n    constructor(mapModel: MapModel, sources: SearchSource[]) {\n        this.#mapModel = mapModel;\n        this.#sources = sources;\n    }\n\n    destroy() {\n        this.#abortController?.abort();\n        this.#abortController = undefined;\n    }\n\n    async search(searchTerm: string): Promise<SuggestionGroup[]> {\n        this.#abortController?.abort();\n        this.#abortController = undefined;\n        if (!searchTerm) {\n            return [];\n        }\n\n        const abort = (this.#abortController = new AbortController());\n        try {\n            await waitForTimeOut(abort.signal, this.#searchTypingDelay);\n            if (abort.signal.aborted) {\n                LOG.debug(`search canceled with ${searchTerm}`);\n                throwAbortError();\n            }\n            const settledSearches = await Promise.all(\n                this.#sources.map((source) => this.#searchSource(source, searchTerm, abort.signal))\n            );\n            return settledSearches.filter((s): s is SuggestionGroup => s != null);\n        } finally {\n            if (this.#abortController === abort) {\n                this.#abortController = undefined;\n            }\n        }\n    }\n\n    async #searchSource(\n        source: SearchSource,\n        searchTerm: string,\n        signal: AbortSignal\n    ): Promise<SuggestionGroup | undefined> {\n        const label = source.label;\n        const projection = this.#mapModel.olMap.getView().getProjection();\n        try {\n            const maxResults = this.#maxResultsPerSource;\n            let results = await source.search(searchTerm, {\n                maxResults,\n                signal,\n                mapProjection: projection\n            });\n            if (results.length > maxResults) {\n                results = results.slice(0, maxResults);\n            }\n            return { label, source, results };\n        } catch (e) {\n            if (!isAbortError(e)) {\n                LOG.error(`search for source ${label} failed`, e);\n            }\n            return undefined;\n        }\n    }\n\n    get searchTypingDelay(): number {\n        return this.#searchTypingDelay;\n    }\n\n    set searchTypingDelay(value: number | undefined) {\n        this.#searchTypingDelay = value ?? DEFAULT_SEARCH_TYPING_DELAY;\n    }\n\n    get maxResultsPerSource(): number {\n        return this.#maxResultsPerSource;\n    }\n\n    set maxResultsPerSource(value: number | undefined) {\n        this.#maxResultsPerSource = value ?? DEFAULT_MAX_RESULTS_PER_SOURCE;\n    }\n\n    get sources() {\n        return this.#sources;\n    }\n}\n\n/**\n * wait for timeouts millis or until signal is aborted, whatever happens first\n */\nasync function waitForTimeOut(signal: AbortSignal, timeoutMillis: number) {\n    if (signal.aborted) {\n        return;\n    }\n\n    await new Promise<void>((resolve) => {\n        const done = () => {\n            signal.removeEventListener(\"abort\", done);\n            clearTimeout(timeoutId);\n            resolve();\n        };\n\n        signal.addEventListener(\"abort\", done);\n        const timeoutId = setTimeout(done, timeoutMillis);\n    });\n}\n"],"names":[],"mappings":"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"}