{"version":3,"file":"LayerCollectionImpl.js","sources":["LayerCollectionImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { EventEmitter, createLogger } from \"@open-pioneer/core\";\nimport OlBaseLayer from \"ol/layer/Base\";\nimport { LayerCollection, LayerCollectionEvents, Layer, LayerRetrievalOptions } from \"../api\";\nimport { AbstractLayer } from \"./AbstractLayer\";\nimport { AbstractLayerBase } from \"./AbstractLayerBase\";\nimport { MapModelImpl } from \"./MapModelImpl\";\n\nconst LOG = createLogger(\"map:LayerCollection\");\n\nconst BASE_LAYER_Z = 0;\nconst OPERATION_LAYER_INITIAL_Z = 1;\n\n/**\n * Z index for layers that should always be rendered on top of all other layers.\n * Note that this is an internal, unstable property!\n *\n * @internal\n */\nexport const TOPMOST_LAYER_Z = 9999999;\n\nexport class LayerCollectionImpl\n    extends EventEmitter<LayerCollectionEvents>\n    implements LayerCollection\n{\n    #map: MapModelImpl;\n\n    /** Top level layers (base layers, operational layers). No sublayers. */\n    #topLevelLayers = new Set<AbstractLayer>();\n\n    /** Index of _all_ layer instances, including sublayers. */\n    #layersById = new Map<string, AbstractLayerBase>();\n\n    /** Reverse index of _all_ layers that have an associated OpenLayers layer. */\n    #layersByOlLayer: WeakMap<OlBaseLayer, AbstractLayer> = new WeakMap();\n\n    /** Currently active base layer. */\n    #activeBaseLayer: AbstractLayer | undefined;\n\n    /** next z-index for operational layer. currently just auto-increments. */\n    #nextIndex = OPERATION_LAYER_INITIAL_Z;\n\n    constructor(map: MapModelImpl) {\n        super();\n        this.#map = map;\n    }\n\n    destroy() {\n        // Collection is destroyed together with the map, there is no need to clean up the olMap\n        for (const layer of this.#layersById.values()) {\n            layer.destroy();\n        }\n        this.#topLevelLayers.clear();\n        this.#layersById.clear();\n        this.#activeBaseLayer = undefined;\n    }\n\n    addLayer(layer: Layer): void {\n        if (!isLayerInstance(layer)) {\n            throw new Error(\n                `Layer is not a valid layer instance. Use one of the classes provided by the map package instead.`\n            );\n        }\n\n        layer.__attach(this.#map);\n        this.#addLayer(layer);\n    }\n\n    getBaseLayers(): AbstractLayer[] {\n        return this.getAllLayers().filter((layer) => layer.isBaseLayer);\n    }\n\n    getActiveBaseLayer(): AbstractLayer | undefined {\n        return this.#activeBaseLayer;\n    }\n\n    activateBaseLayer(id: string | undefined): boolean {\n        let newBaseLayer = undefined;\n        if (id != null) {\n            newBaseLayer = this.#layersById.get(id);\n            if (!(newBaseLayer instanceof AbstractLayer)) {\n                LOG.warn(`Cannot activate base layer '${id}: layer has an invalid type.'`);\n                return false;\n            }\n            if (!newBaseLayer) {\n                LOG.warn(`Cannot activate base layer '${id}': layer is unknown.`);\n                return false;\n            }\n            if (!newBaseLayer.isBaseLayer) {\n                LOG.warn(`Cannot activate base layer '${id}': layer is not a base layer.`);\n                return false;\n            }\n        }\n\n        if (newBaseLayer !== this.#activeBaseLayer) {\n            this.#updateBaseLayer(newBaseLayer);\n            this.emit(\"changed\");\n        }\n        return true;\n    }\n\n    getOperationalLayers(options?: LayerRetrievalOptions): AbstractLayer[] {\n        return this.getAllLayers(options).filter((layer) => !layer.isBaseLayer);\n    }\n\n    getAllLayers(options?: LayerRetrievalOptions): AbstractLayer[] {\n        const layers = Array.from(this.#topLevelLayers.values());\n        if (options?.sortByDisplayOrder) {\n            sortLayersByDisplayOrder(layers);\n        }\n        return layers;\n    }\n\n    getLayerById(id: string): AbstractLayerBase | undefined {\n        return this.#layersById.get(id);\n    }\n\n    removeLayerById(id: string): void {\n        const model = this.#layersById.get(id);\n        if (!model) {\n            LOG.isDebug() && LOG.debug(`Cannot remove layer '${id}': layer is unknown.`);\n            return;\n        }\n\n        this.#removeLayer(model);\n    }\n\n    getLayerByRawInstance(layer: OlBaseLayer): Layer | undefined {\n        return this.#layersByOlLayer?.get(layer);\n    }\n\n    /**\n     * Adds the given layer to the map and all relevant indices.\n     */\n    #addLayer(model: AbstractLayer) {\n        this.#indexLayer(model);\n\n        const olLayer = model.olLayer;\n        if (model.isBaseLayer) {\n            olLayer.setZIndex(BASE_LAYER_Z);\n            if (!this.#activeBaseLayer && model.visible) {\n                this.#updateBaseLayer(model);\n            } else {\n                model.__setVisible(false);\n            }\n        } else {\n            olLayer.setZIndex(this.#nextIndex++);\n            model.__setVisible(model.visible);\n        }\n\n        this.#topLevelLayers.add(model);\n        this.#map.olMap.addLayer(olLayer);\n        this.emit(\"changed\");\n    }\n\n    /**\n     * Removes the given layer from the map and all relevant indices.\n     * The layer will be destroyed.\n     */\n    #removeLayer(model: AbstractLayer | AbstractLayerBase) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.#topLevelLayers.has(model as any)) {\n            LOG.warn(\n                `Cannot remove layer '${model.id}': only top level layers can be removed at this time.`\n            );\n            return;\n        }\n\n        if (!(model instanceof AbstractLayer)) {\n            throw new Error(\n                `Internal error: expected top level layer to be an instance of AbstractLayer.`\n            );\n        }\n\n        this.#map.olMap.removeLayer(model.olLayer);\n        this.#topLevelLayers.delete(model);\n        this.#unIndexLayer(model);\n        if (this.#activeBaseLayer === model) {\n            this.#updateBaseLayer(this.getBaseLayers()[0]);\n        }\n        model.destroy();\n        this.emit(\"changed\");\n    }\n\n    #updateBaseLayer(model: AbstractLayer | undefined) {\n        if (this.#activeBaseLayer === model) {\n            return;\n        }\n\n        if (LOG.isDebug()) {\n            const getId = (model: AbstractLayer | undefined) => {\n                return model ? `'${model.id}'` : undefined;\n            };\n\n            LOG.debug(\n                `Switching active base layer from ${getId(this.#activeBaseLayer)} to ${getId(\n                    model\n                )}`\n            );\n        }\n        this.#activeBaseLayer?.__setVisible(false);\n        this.#activeBaseLayer = model;\n        this.#activeBaseLayer?.__setVisible(true);\n    }\n\n    /**\n     * Index the layer and all its children.\n     */\n    #indexLayer(model: AbstractLayer) {\n        // layer id -> layer (or sublayer)\n        const registrations: [string, OlBaseLayer | undefined][] = [];\n        const visit = (model: AbstractLayer | AbstractLayerBase) => {\n            const id = model.id;\n            const olLayer = \"olLayer\" in model ? model.olLayer : undefined;\n            if (this.#layersById.has(id)) {\n                throw new Error(\n                    `Layer id '${id}' is not unique. Either assign a unique id yourself ` +\n                        `or skip configuring 'id' for an automatically generated id.`\n                );\n            }\n            if (olLayer && this.#layersByOlLayer.has(olLayer)) {\n                throw new Error(`OlLayer has already been used in this or another layer.`);\n            }\n\n            // Register this layer with the maps.\n            this.#layersById.set(id, model);\n            if (olLayer) {\n                this.#layersByOlLayer.set(olLayer, model as AbstractLayer);\n            }\n            registrations.push([id, olLayer]);\n\n            // Recurse into nested sublayers.\n            for (const sublayer of model.sublayers?.__getRawSublayers() ?? []) {\n                visit(sublayer);\n            }\n        };\n\n        try {\n            visit(model);\n        } catch (e) {\n            for (const [id, olLayer] of registrations) {\n                this.#layersById.delete(id);\n                if (olLayer) {\n                    this.#layersByOlLayer.delete(olLayer);\n                }\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Removes index entries for the given layer and all its sublayers.\n     */\n    #unIndexLayer(model: AbstractLayer) {\n        const visit = (model: AbstractLayer | AbstractLayerBase) => {\n            if (\"olLayer\" in model) {\n                this.#layersByOlLayer.delete(model.olLayer);\n            }\n            this.#layersById.delete(model.id);\n            for (const sublayer of model.sublayers?.__getRawSublayers() ?? []) {\n                visit(sublayer);\n            }\n        };\n        visit(model);\n    }\n}\n\nfunction sortLayersByDisplayOrder(layers: Layer[]) {\n    layers.sort((left, right) => {\n        // currently layers are added with increasing z-index (base layers: 0), so\n        // ordering by z-index is automatically the correct display order.\n        // we use the id as the tie breaker for equal z-indices.\n        const leftZ = left.olLayer.getZIndex() ?? 1;\n        const rightZ = right.olLayer.getZIndex() ?? 1;\n        if (leftZ !== rightZ) {\n            return leftZ - rightZ;\n        }\n        return left.id.localeCompare(right.id, \"en\");\n    });\n}\n\nfunction isLayerInstance(object: unknown): object is AbstractLayer {\n    return object instanceof AbstractLayer;\n}\n"],"names":["model"],"mappings":"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"}