{"version":3,"file":"LayerCollectionImpl.js","sources":["LayerCollectionImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { EventEmitter, createLogger } from \"@open-pioneer/core\";\nimport OlBaseLayer from \"ol/layer/Base\";\nimport { LayerCollection, LayerCollectionEvents, Layer, LayerRetrievalOptions } from \"../api\";\nimport { AbstractLayer } from \"./AbstractLayer\";\nimport { AbstractLayerBase } from \"./AbstractLayerBase\";\nimport { MapModelImpl } from \"./MapModelImpl\";\n\nconst LOG = createLogger(\"map:LayerCollection\");\n\nconst BASE_LAYER_Z = 0;\nconst OPERATION_LAYER_INITIAL_Z = 1;\n\n/**\n * Z index for layers that should always be rendered on top of all other layers.\n * Note that this is an internal, unstable property!\n *\n * @internal\n */\nexport const TOPMOST_LAYER_Z = 9999999;\n\nexport class LayerCollectionImpl\n    extends EventEmitter<LayerCollectionEvents>\n    implements LayerCollection\n{\n    #map: MapModelImpl;\n\n    /** Top level layers (base layers, operational layers). No sublayers. */\n    #topLevelLayers = new Set<AbstractLayer>();\n\n    /** Index of _all_ layer instances, including sublayers. */\n    #layersById = new Map<string, AbstractLayerBase>();\n\n    /** Reverse index of _all_ layers that have an associated OpenLayers layer. */\n    #layersByOlLayer: WeakMap<OlBaseLayer, AbstractLayer> = new WeakMap();\n\n    /** Currently active base layer. */\n    #activeBaseLayer: AbstractLayer | undefined;\n\n    /** next z-index for operational layer. currently just auto-increments. */\n    #nextIndex = OPERATION_LAYER_INITIAL_Z;\n\n    constructor(map: MapModelImpl) {\n        super();\n        this.#map = map;\n    }\n\n    destroy() {\n        // Collection is destroyed together with the map, there is no need to clean up the olMap\n        for (const layer of this.#layersById.values()) {\n            layer.destroy();\n        }\n        this.#topLevelLayers.clear();\n        this.#layersById.clear();\n        this.#activeBaseLayer = undefined;\n    }\n\n    addLayer(layer: Layer): void {\n        if (!isLayerInstance(layer)) {\n            throw new Error(\n                `Layer is not a valid layer instance. Use one of the classes provided by the map package instead.`\n            );\n        }\n\n        layer.__attach(this.#map);\n        this.#addLayer(layer);\n    }\n\n    getBaseLayers(): AbstractLayer[] {\n        return this.getAllLayers().filter((layer) => layer.isBaseLayer);\n    }\n\n    getActiveBaseLayer(): AbstractLayer | undefined {\n        return this.#activeBaseLayer;\n    }\n\n    activateBaseLayer(id: string | undefined): boolean {\n        let newBaseLayer = undefined;\n        if (id != null) {\n            newBaseLayer = this.#layersById.get(id);\n            if (!(newBaseLayer instanceof AbstractLayer)) {\n                LOG.warn(`Cannot activate base layer '${id}: layer has an invalid type.'`);\n                return false;\n            }\n            if (!newBaseLayer) {\n                LOG.warn(`Cannot activate base layer '${id}': layer is unknown.`);\n                return false;\n            }\n            if (!newBaseLayer.isBaseLayer) {\n                LOG.warn(`Cannot activate base layer '${id}': layer is not a base layer.`);\n                return false;\n            }\n        }\n\n        if (newBaseLayer !== this.#activeBaseLayer) {\n            this.#updateBaseLayer(newBaseLayer);\n            this.emit(\"changed\");\n        }\n        return true;\n    }\n\n    getOperationalLayers(options?: LayerRetrievalOptions): AbstractLayer[] {\n        return this.getAllLayers(options).filter((layer) => !layer.isBaseLayer);\n    }\n\n    getAllLayers(options?: LayerRetrievalOptions): AbstractLayer[] {\n        const layers = Array.from(this.#topLevelLayers.values());\n        if (options?.sortByDisplayOrder) {\n            sortLayersByDisplayOrder(layers);\n        }\n        return layers;\n    }\n\n    getLayerById(id: string): AbstractLayerBase | undefined {\n        return this.#layersById.get(id);\n    }\n\n    removeLayerById(id: string): void {\n        const model = this.#layersById.get(id);\n        if (!model) {\n            LOG.isDebug() && LOG.debug(`Cannot remove layer '${id}': layer is unknown.`);\n            return;\n        }\n\n        this.#removeLayer(model);\n    }\n\n    getLayerByRawInstance(layer: OlBaseLayer): Layer | undefined {\n        return this.#layersByOlLayer?.get(layer);\n    }\n\n    /**\n     * Adds the given layer to the map and all relevant indices.\n     */\n    #addLayer(model: AbstractLayer) {\n        this.#indexLayer(model);\n\n        const olLayer = model.olLayer;\n        if (model.isBaseLayer) {\n            olLayer.setZIndex(BASE_LAYER_Z);\n            if (!this.#activeBaseLayer && model.visible) {\n                this.#updateBaseLayer(model);\n            } else {\n                model.__setVisible(false);\n            }\n        } else {\n            olLayer.setZIndex(this.#nextIndex++);\n            model.__setVisible(model.visible);\n        }\n\n        this.#topLevelLayers.add(model);\n        this.#map.olMap.addLayer(olLayer);\n        this.emit(\"changed\");\n    }\n\n    /**\n     * Removes the given layer from the map and all relevant indices.\n     * The layer will be destroyed.\n     */\n    #removeLayer(model: AbstractLayer | AbstractLayerBase) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.#topLevelLayers.has(model as any)) {\n            LOG.warn(\n                `Cannot remove layer '${model.id}': only top level layers can be removed at this time.`\n            );\n            return;\n        }\n\n        if (!(model instanceof AbstractLayer)) {\n            throw new Error(\n                `Internal error: expected top level layer to be an instance of AbstractLayer.`\n            );\n        }\n\n        this.#map.olMap.removeLayer(model.olLayer);\n        this.#topLevelLayers.delete(model);\n        this.#unIndexLayer(model);\n        if (this.#activeBaseLayer === model) {\n            this.#updateBaseLayer(this.getBaseLayers()[0]);\n        }\n        model.destroy();\n        this.emit(\"changed\");\n    }\n\n    #updateBaseLayer(model: AbstractLayer | undefined) {\n        if (this.#activeBaseLayer === model) {\n            return;\n        }\n\n        if (LOG.isDebug()) {\n            const getId = (model: AbstractLayer | undefined) => {\n                return model ? `'${model.id}'` : undefined;\n            };\n\n            LOG.debug(\n                `Switching active base layer from ${getId(this.#activeBaseLayer)} to ${getId(\n                    model\n                )}`\n            );\n        }\n        this.#activeBaseLayer?.__setVisible(false);\n        this.#activeBaseLayer = model;\n        this.#activeBaseLayer?.__setVisible(true);\n    }\n\n    /**\n     * Index the layer and all its children.\n     */\n    #indexLayer(model: AbstractLayer) {\n        // layer id -> layer (or sublayer)\n        const registrations: [string, OlBaseLayer | undefined][] = [];\n        const visit = (model: AbstractLayer | AbstractLayerBase) => {\n            const id = model.id;\n            const olLayer = \"olLayer\" in model ? model.olLayer : undefined;\n            if (this.#layersById.has(id)) {\n                throw new Error(\n                    `Layer id '${id}' is not unique. Either assign a unique id yourself ` +\n                        `or skip configuring 'id' for an automatically generated id.`\n                );\n            }\n            if (olLayer && this.#layersByOlLayer.has(olLayer)) {\n                throw new Error(`OlLayer has already been used in this or another layer.`);\n            }\n\n            // Register this layer with the maps.\n            this.#layersById.set(id, model);\n            if (olLayer) {\n                this.#layersByOlLayer.set(olLayer, model as AbstractLayer);\n            }\n            registrations.push([id, olLayer]);\n\n            // Recurse into nested sublayers.\n            for (const sublayer of model.sublayers?.__getRawSublayers() ?? []) {\n                visit(sublayer);\n            }\n        };\n\n        try {\n            visit(model);\n        } catch (e) {\n            for (const [id, olLayer] of registrations) {\n                this.#layersById.delete(id);\n                if (olLayer) {\n                    this.#layersByOlLayer.delete(olLayer);\n                }\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Removes index entries for the given layer and all its sublayers.\n     */\n    #unIndexLayer(model: AbstractLayer) {\n        const visit = (model: AbstractLayer | AbstractLayerBase) => {\n            if (\"olLayer\" in model) {\n                this.#layersByOlLayer.delete(model.olLayer);\n            }\n            this.#layersById.delete(model.id);\n            for (const sublayer of model.sublayers?.__getRawSublayers() ?? []) {\n                visit(sublayer);\n            }\n        };\n        visit(model);\n    }\n}\n\nfunction sortLayersByDisplayOrder(layers: Layer[]) {\n    layers.sort((left, right) => {\n        // currently layers are added with increasing z-index (base layers: 0), so\n        // ordering by z-index is automatically the correct display order.\n        // we use the id as the tie breaker for equal z-indices.\n        const leftZ = left.olLayer.getZIndex() ?? 1;\n        const rightZ = right.olLayer.getZIndex() ?? 1;\n        if (leftZ !== rightZ) {\n            return leftZ - rightZ;\n        }\n        return left.id.localeCompare(right.id, \"en\");\n    });\n}\n\nfunction isLayerInstance(object: unknown): object is AbstractLayer {\n    return object instanceof AbstractLayer;\n}\n"],"names":["model"],"mappings":"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"}