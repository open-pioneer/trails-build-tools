{"version":3,"file":"createMapModel.js","sources":["createMapModel.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger } from \"@open-pioneer/core\";\nimport OlMap, { MapOptions } from \"ol/Map\";\nimport View, { ViewOptions } from \"ol/View\";\nimport Attribution from \"ol/control/Attribution\";\nimport { getCenter } from \"ol/extent\";\nimport TileLayer from \"ol/layer/Tile\";\nimport { Projection, get as getProjection } from \"ol/proj\";\nimport OSM from \"ol/source/OSM\";\nimport { DragZoom, defaults as defaultInteractions } from \"ol/interaction\";\nimport { MapBrowserEvent } from \"ol\";\nimport { MapModelImpl } from \"./MapModelImpl\";\nimport { MapConfig } from \"../api\";\nimport { registerProjections } from \"../projections\";\nimport { patchOpenLayersClassesForTesting } from \"../util/ol-test-support\";\nimport { HttpService } from \"@open-pioneer/http\";\n\n/**\n * Register custom projection to the global proj4js definitions. User can select `EPSG:25832`\n * and `EPSG:25833` from the predefined projections without calling `registerProjections`.\n */\nregisterProjections({\n    \"EPSG:25832\":\n        \"+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs\",\n    \"EPSG:25833\":\n        \"+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs\"\n});\nconst LOG = createLogger(\"map:createMapModel\");\n\nexport async function createMapModel(\n    mapId: string,\n    mapConfig: MapConfig,\n    httpService: HttpService\n): Promise<MapModelImpl> {\n    return await new MapModelFactory(mapId, mapConfig, httpService).createMapModel();\n}\n\nclass MapModelFactory {\n    private mapId: string;\n    private mapConfig: MapConfig;\n    private httpService: HttpService;\n\n    constructor(mapId: string, mapConfig: MapConfig, httpService: HttpService) {\n        this.mapId = mapId;\n        this.mapConfig = mapConfig;\n        this.httpService = httpService;\n    }\n\n    async createMapModel() {\n        const mapId = this.mapId;\n        const mapConfig = this.mapConfig;\n        const { view: viewOption, ...rawOlOptions } = mapConfig.advanced ?? {};\n        const mapOptions: MapOptions = {\n            ...rawOlOptions\n        };\n\n        if (!mapOptions.controls) {\n            mapOptions.controls = [new Attribution({ collapsible: false })];\n        }\n\n        if (!mapOptions.interactions) {\n            const shiftCtrlKeysOnly = (mapBrowserEvent: MapBrowserEvent<KeyboardEvent>) => {\n                const originalEvent = mapBrowserEvent.originalEvent;\n                return (originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n            };\n            /*\n             * setting altShiftDragRotate to false disables or excludes DragRotate interaction\n             * */\n            mapOptions.interactions = defaultInteractions({\n                dragPan: true,\n                altShiftDragRotate: false,\n                pinchRotate: false,\n                mouseWheelZoom: true\n            }).extend([new DragZoom({ out: true, condition: shiftCtrlKeysOnly })]);\n        }\n\n        const view = (await viewOption) ?? {};\n        this.initializeViewOptions(view);\n        mapOptions.view = view instanceof View ? view : new View(view);\n\n        if (!mapOptions.layers && !mapConfig.layers) {\n            mapOptions.layers = [\n                new TileLayer({\n                    source: new OSM()\n                })\n            ];\n        }\n\n        const initialView = mapConfig.initialView;\n        const initialExtent = initialView?.kind === \"extent\" ? initialView.extent : undefined;\n\n        LOG.debug(`Constructing OpenLayers map with options`, mapOptions);\n\n        if (import.meta.env.VITEST) {\n            patchOpenLayersClassesForTesting();\n        }\n\n        const olMap = new OlMap(mapOptions);\n\n        const mapModel = new MapModelImpl({\n            id: mapId,\n            olMap,\n            initialExtent,\n            httpService: this.httpService\n        });\n\n        try {\n            if (mapConfig.layers) {\n                for (const layerConfig of mapConfig.layers) {\n                    mapModel.layers.addLayer(layerConfig);\n                }\n            }\n            return mapModel;\n        } catch (e) {\n            mapModel.destroy();\n            throw e;\n        }\n    }\n\n    private initializeViewOptions(view: View | ViewOptions) {\n        const mapId = this.mapId;\n        const mapConfig = this.mapConfig;\n        if (view instanceof View) {\n            const warn = (prop: string) => {\n                LOG.warn(\n                    `The advanced configuration for map id '${mapId}' has provided a fully constructed view instance: ${prop} cannot be applied.\\n` +\n                        `Use ViewOptions instead of a View instance.`\n                );\n            };\n\n            if (mapConfig.projection != null) {\n                warn(\"projection\");\n            }\n            if (mapConfig.initialView != null) {\n                warn(\"initialView\");\n            }\n            return;\n        }\n\n        const projection = (view.projection = this.initializeProjection(mapConfig.projection));\n        const initialView = mapConfig.initialView;\n        if (initialView) {\n            switch (initialView.kind) {\n                case \"position\":\n                    view.zoom = initialView.zoom;\n                    view.center = [initialView.center.x, initialView.center.y];\n                    break;\n                case \"extent\": {\n                    /*\n                        OpenLayers does not support configuration of the initial map extent.\n                        The only relevant options here are center, zoom (and resolution).\n                        We must set those values because otherwise OpenLayers will not initialize layer sources.\n\n                        The actual initial extent is applied once tha map has loaded and its size is known.\n                    */\n                    const extent = initialView.extent;\n                    view.zoom = 0;\n                    view.center = [\n                        extent.xMin + (extent.xMax - extent.xMin) / 2,\n                        extent.yMin + (extent.yMax - extent.yMin) / 2\n                    ];\n                    break;\n                }\n            }\n        } else {\n            this.setViewDefaults(view, projection);\n        }\n    }\n\n    private setViewDefaults(view: ViewOptions, projection: Projection) {\n        if (view.center == null) {\n            const extent = projection.getExtent(); // can be null\n            if (!extent) {\n                LOG.warn(\n                    `Cannot set default center coordinate because the current projection has no associated extent.\\n` +\n                        `Try to configure 'initialView' explicity.`\n                );\n            } else {\n                view.center = getCenter(extent);\n            }\n        }\n\n        if (view.zoom == null || view.resolution == null) {\n            view.zoom = 0;\n        }\n    }\n\n    private initializeProjection(projectionOption: MapConfig[\"projection\"]) {\n        if (projectionOption == null) {\n            return getProjection(\"EPSG:3857\")!; // default OpenLayers projection\n        }\n\n        const projection = getProjection(projectionOption);\n        if (!projection) {\n            throw new Error(`Failed to retrieve projection for code '${projectionOption}'.`);\n        }\n        return projection;\n    }\n}\n"],"names":["defaultInteractions","getProjection"],"mappings":"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"}