{"version":3,"file":"WMSLayerImpl.js","sources":["WMSLayerImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger, isAbortError } from \"@open-pioneer/core\";\nimport { ImageWrapper } from \"ol\";\nimport WMSCapabilities from \"ol/format/WMSCapabilities\";\nimport ImageLayer from \"ol/layer/Image\";\nimport type ImageSource from \"ol/source/Image\";\nimport ImageWMS from \"ol/source/ImageWMS\";\nimport { WMSLayer, WMSLayerConfig, WMSSublayer, WMSSublayerConfig } from \"../../api\";\nimport { fetchCapabilities } from \"../../util/capabilities-utils\";\nimport { DeferredExecution, defer } from \"../../util/defer\";\nimport { AbstractLayer } from \"../AbstractLayer\";\nimport { AbstractLayerBase } from \"../AbstractLayerBase\";\nimport { MapModelImpl } from \"../MapModelImpl\";\nimport { SublayersCollectionImpl } from \"../SublayersCollectionImpl\";\n\nconst LOG = createLogger(\"map:WMSLayer\");\n\nexport class WMSLayerImpl extends AbstractLayer implements WMSLayer {\n    #url: string;\n    #sublayers: SublayersCollectionImpl<WMSSublayerImpl>;\n    #deferredSublayerUpdate: DeferredExecution | undefined;\n    #layer: ImageLayer<ImageSource>;\n    #source: ImageWMS;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    #capabilities: Record<string, any> | undefined;\n    readonly #abortController = new AbortController();\n\n    constructor(config: WMSLayerConfig) {\n        const layer = new ImageLayer();\n        super({\n            ...config,\n            olLayer: layer\n        });\n        const source = new ImageWMS({\n            ...config.sourceOptions,\n            url: config.url,\n            params: {\n                ...config.sourceOptions?.params\n            },\n            // Use http service to load tiles; needed for authentication etc.\n            imageLoadFunction: (wrapper, url) => {\n                return this.#loadImage(wrapper, url).catch((error) => {\n                    LOG.error(`Failed to load tile at '${url}'`, error);\n                });\n            }\n        });\n        this.#url = config.url;\n        this.#source = source;\n        this.#layer = layer;\n        this.#sublayers = new SublayersCollectionImpl(constructSublayers(config.sublayers));\n        this.#updateLayersParam();\n    }\n\n    get legend() {\n        return undefined;\n    }\n\n    get url(): string {\n        return this.#url;\n    }\n    get __source() {\n        return this.#source;\n    }\n\n    get sublayers(): SublayersCollectionImpl<WMSSublayerImpl> {\n        return this.#sublayers;\n    }\n\n    get capabilities() {\n        return this.#capabilities;\n    }\n\n    __attach(map: MapModelImpl): void {\n        super.__attach(map);\n        for (const sublayer of this.#sublayers.getSublayers()) {\n            sublayer.__attach(map, this, this);\n        }\n        const layers: WMSSublayerImpl[] = [];\n        /** identify all leaf nodes representing a layer in the structure */\n        const getNestedSublayer = (sublayers: WMSSublayerImpl[], layers: WMSSublayerImpl[]) => {\n            for (const sublayer of sublayers) {\n                const nested = sublayer.sublayers.getSublayers();\n                if (nested.length) {\n                    getNestedSublayer(nested, layers);\n                } else {\n                    if (sublayer.name) {\n                        layers.push(sublayer);\n                    }\n                }\n            }\n        };\n        this.#fetchWMSCapabilities()\n            .then((result: string) => {\n                const parser = new WMSCapabilities();\n                const capabilities = parser.read(result);\n                this.#capabilities = capabilities;\n                getNestedSublayer(this.#sublayers.getSublayers(), layers);\n\n                for (const layer of layers) {\n                    const legendUrl = getWMSLegendUrl(capabilities, layer.name!);\n                    layer.legend = legendUrl;\n                }\n            })\n            .catch((error) => {\n                if (isAbortError(error)) {\n                    LOG.error(`Layer ${this.id} has been destroyed before fetching the data`);\n                    return;\n                }\n                LOG.error(`Failed fetching WMS capabilities for Layer ${this.id}`, error);\n            });\n    }\n\n    /** Called by the sublayers when their visibility changed. */\n    __updateSublayerVisibility() {\n        if (this.#deferredSublayerUpdate?.reschedule()) {\n            return;\n        }\n        this.#deferredSublayerUpdate = defer(() => {\n            try {\n                this.#updateLayersParam();\n                this.#deferredSublayerUpdate = undefined;\n            } catch (e) {\n                LOG.error(`Failed to update sublayer visibility on WMS layer '${this.id}'.`, e);\n            }\n        });\n    }\n\n    /**\n     * Gathers the visibility of _all_ sublayers and assembles the 'layers' WMS parameter.\n     * The parameters are then applied to the WMS source.\n     */\n    #updateLayersParam() {\n        const layers = this.#getVisibleLayerNames();\n        this.#source.updateParams({\n            \"LAYERS\": layers\n        });\n\n        // only set source if there are visible sublayers, otherwise\n        // we send an invalid http request\n        const source = layers.length === 0 ? null : this.#source;\n        if (this.#layer.getSource() !== source) {\n            this.#layer.setSource(source);\n        }\n    }\n\n    #getVisibleLayerNames() {\n        const layers: string[] = [];\n        const visitSublayer = (sublayer: WMSSublayerImpl) => {\n            if (!sublayer.visible) {\n                return;\n            }\n\n            const nestedSublayers = sublayer.sublayers.__getRawSublayers();\n            if (nestedSublayers.length) {\n                for (const nestedSublayer of nestedSublayers) {\n                    visitSublayer(nestedSublayer);\n                }\n            } else {\n                /**\n                 * Push sublayer only, if layer name is not an empty string | undefined | ...\n                 */\n                if (sublayer.name) {\n                    layers.push(sublayer.name);\n                }\n            }\n        };\n\n        for (const sublayer of this.sublayers.__getRawSublayers()) {\n            visitSublayer(sublayer);\n        }\n        return layers;\n    }\n\n    async #fetchWMSCapabilities(): Promise<string> {\n        const httpService = this.map.__sharedDependencies.httpService;\n        const url = `${this.#url}?LANGUAGE=ger&SERVICE=WMS&REQUEST=GetCapabilities`;\n        return fetchCapabilities(url, httpService, this.#abortController.signal);\n    }\n\n    async #loadImage(imageWrapper: ImageWrapper, imageUrl: string): Promise<void> {\n        const httpService = this.map.__sharedDependencies.httpService;\n        const image = imageWrapper.getImage() as HTMLImageElement;\n\n        const response = await httpService.fetch(imageUrl);\n        if (!response.ok) {\n            throw new Error(`Request failed with status ${response.status}.`);\n        }\n\n        const blob = await response.blob();\n        const objectUrl = URL.createObjectURL(blob);\n        const finish = () => {\n            // Cleanup object URL after load to prevent memory leaks.\n            // https://stackoverflow.com/questions/62473876/openlayers-6-settileloadfunction-documented-example-uses-url-createobjecturld\n            URL.revokeObjectURL(objectUrl);\n            image.removeEventListener(\"load\", finish);\n            image.removeEventListener(\"error\", finish);\n        };\n\n        image.addEventListener(\"load\", finish);\n        image.addEventListener(\"error\", finish);\n        image.src = objectUrl;\n    }\n}\n\nclass WMSSublayerImpl extends AbstractLayerBase implements WMSSublayer {\n    #parent: WMSSublayerImpl | WMSLayerImpl | undefined;\n    #parentLayer: WMSLayerImpl | undefined;\n    #name: string | undefined;\n    #legend: string | undefined;\n    #sublayers: SublayersCollectionImpl<WMSSublayerImpl>;\n    #visible: boolean;\n\n    constructor(config: WMSSublayerConfig) {\n        super(config);\n        this.#name = config.name;\n        this.#visible = config.visible ?? true;\n        this.#sublayers = new SublayersCollectionImpl(constructSublayers(config.sublayers));\n    }\n\n    get name(): string | undefined {\n        return this.#name;\n    }\n\n    get sublayers(): SublayersCollectionImpl<WMSSublayerImpl> {\n        return this.#sublayers;\n    }\n\n    get parent(): WMSSublayerImpl | WMSLayerImpl {\n        const parent = this.#parent;\n        if (!parent) {\n            throw new Error(`WMS sublayer ${this.id} has not been attached to its parent yet.`);\n        }\n        return parent;\n    }\n\n    get parentLayer(): WMSLayerImpl {\n        const parentLayer = this.#parentLayer;\n        if (!parentLayer) {\n            throw new Error(`WMS sublayer ${this.id} has not been attached to its parent yet.`);\n        }\n        return parentLayer;\n    }\n    get legend(): string | undefined {\n        return this.#legend;\n    }\n\n    set legend(legendUrl: string | undefined) {\n        this.#legend = legendUrl;\n        this.__emitChangeEvent(\"changed:legend\");\n    }\n\n    /**\n     * Called by the parent layer when it is attached to the map to attach all sublayers.\n     */\n    __attach(\n        map: MapModelImpl,\n        parentLayer: WMSLayerImpl,\n        parent: WMSLayerImpl | WMSSublayerImpl\n    ): void {\n        super.__attachToMap(map);\n        if (this.#parent) {\n            throw new Error(\n                `WMS sublayer '${this.id}' has already been attached to parent '${this.#parent.id}'`\n            );\n        }\n        this.#parent = parent;\n        if (this.#parentLayer) {\n            throw new Error(\n                `WMS sublayer '${this.id}' has already been attached to parent layer '${this.#parentLayer.id}'`\n            );\n        }\n        this.#parentLayer = parentLayer;\n\n        // Recurse into nested sublayers\n        for (const sublayer of this.sublayers.__getRawSublayers()) {\n            sublayer.__attach(map, parentLayer, this);\n        }\n    }\n\n    get visible(): boolean {\n        return this.#visible;\n    }\n\n    setVisible(newVisibility: boolean): void {\n        if (this.visible !== newVisibility) {\n            this.#visible = newVisibility;\n            this.#parentLayer?.__updateSublayerVisibility();\n            this.__emitChangeEvent(\"changed:visible\");\n        }\n    }\n}\n\nfunction constructSublayers(sublayerConfigs: WMSSublayerConfig[] = []): WMSSublayerImpl[] {\n    const sublayers: WMSSublayerImpl[] = [];\n    try {\n        for (const sublayerConfig of sublayerConfigs) {\n            sublayers.push(new WMSSublayerImpl(sublayerConfig));\n        }\n        return sublayers;\n    } catch (e) {\n        // Ensure previous sublayers are destroyed if a single constructor throws\n        while (sublayers.length) {\n            const layer = sublayers.pop()!;\n            layer?.destroy();\n        }\n        throw new Error(\"Failed to construct sublayers.\", { cause: e });\n    }\n}\n\n/** extract the legend url from the service capabilities */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getWMSLegendUrl(capabilities: Record<string, any>, layerName: string) {\n    const capabilitiesContent = capabilities?.Capability;\n    const rootLayerCapabilities = capabilitiesContent?.Layer;\n    let url: string | undefined = undefined;\n\n    /** Recurse search for the currrent layer within the parsed capabilities service*/\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const searchNestedLayer = (layer: Record<string, any>[]) => {\n        for (const currentLayer of layer) {\n            // spec. if, a layer has a <Name>, then it is a map layer\n            if (currentLayer?.Name === layerName) {\n                const activeLayer = currentLayer;\n                const styles = activeLayer.Style;\n                if (!styles || !styles.length) {\n                    LOG.debug(\"No style in WMS layer capabilities - giving up.\");\n                    return;\n                }\n                // by parsing of the service capabilities, every child inherits the parent's legend\n                // theorfore, extract the legendURL from the first style object in the array (its own legend)\n                const activeStyle = styles[0];\n                url = activeStyle.LegendURL?.[0]?.OnlineResource;\n            } else if (currentLayer.Layer) {\n                searchNestedLayer(currentLayer.Layer);\n            }\n        }\n    };\n    if (rootLayerCapabilities) {\n        searchNestedLayer(rootLayerCapabilities.Layer);\n    }\n    return url;\n}\n"],"names":["layers"],"mappings":"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"}