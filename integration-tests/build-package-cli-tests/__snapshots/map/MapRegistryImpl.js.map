{"version":3,"file":"MapRegistryImpl.js","sources":["MapRegistryImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger } from \"@open-pioneer/core\";\nimport { Service, ServiceOptions } from \"@open-pioneer/runtime\";\nimport OlMap from \"ol/Map\";\nimport { MapModelImpl } from \"./model/MapModelImpl\";\nimport { MapConfigProvider, MapModel, MapRegistry } from \"./api\";\nimport { createMapModel } from \"./model/createMapModel\";\nimport { HttpService } from \"@open-pioneer/http\";\n\nconst LOG = createLogger(\"map:MapRegistry\");\n\ninterface References {\n    providers: MapConfigProvider[];\n    httpService: HttpService;\n}\n\ntype ModelJobResult = { kind: \"model\"; model: MapModelImpl } | { kind: \"error\"; error: Error };\n\nexport class MapRegistryImpl implements Service, MapRegistry {\n    #httpService: HttpService;\n\n    #configProviders = new Map<string, MapConfigProvider>();\n    #entries = new Map<string, ModelJobResult>();\n    #modelCreationJobs = new Map<string, Promise<ModelJobResult>>();\n    #modelsByOlMap = new WeakMap<OlMap, MapModel>();\n    #destroyed = false;\n\n    constructor({ references }: ServiceOptions<References>) {\n        this.#httpService = references.httpService;\n\n        const providers = references.providers;\n        for (const provider of providers) {\n            this.#configProviders.set(provider.mapId, provider);\n        }\n    }\n\n    destroy(): void {\n        if (this.#destroyed) {\n            return;\n        }\n\n        LOG.info(`Destroy map registry and all maps`);\n        this.#destroyed = true;\n        this.#entries.forEach((model) => {\n            model.kind === \"model\" && model.model.destroy();\n        });\n        this.#entries.clear();\n        this.#modelCreationJobs.clear();\n    }\n\n    async getMapModel(mapId: string): Promise<MapModel | undefined> {\n        if (this.#destroyed) {\n            throw new Error(\"MapRegistry has already been destroyed.\");\n        }\n\n        const creationJob = this.#modelCreationJobs.get(mapId);\n        if (creationJob) {\n            return unbox(await creationJob);\n        }\n\n        const entry = this.#entries.get(mapId);\n        if (entry) {\n            return unbox(entry);\n        }\n\n        const provider = this.#configProviders.get(mapId);\n        if (!provider) {\n            LOG.debug(`Failed to find a config provider for map id '${mapId}'.`);\n            return undefined;\n        }\n\n        const modelPromise = this.#createModel(mapId, provider).catch((cause) => {\n            const error = new Error(`Failed to construct map '${mapId}'`, { cause });\n            const entry: ModelJobResult = { kind: \"error\", error };\n            this.#modelCreationJobs.delete(mapId);\n            this.#entries.set(mapId, entry);\n            return entry;\n        });\n        this.#modelCreationJobs.set(mapId, modelPromise);\n        return unbox(await modelPromise);\n    }\n\n    async expectMapModel(mapId: string): Promise<MapModel> {\n        const model = await this.getMapModel(mapId);\n        if (!model) {\n            throw new Error(`No configuration available for map with id '${mapId}'.`);\n        }\n        return model;\n    }\n\n    getMapModelByRawInstance(olMap: OlMap): MapModel | undefined {\n        return this.#modelsByOlMap.get(olMap);\n    }\n\n    async #createModel(mapId: string, provider: MapConfigProvider): Promise<ModelJobResult> {\n        LOG.info(`Creating map with id '${mapId}'`);\n        const mapConfig = await provider.getMapConfig();\n        const mapModel = await createMapModel(mapId, mapConfig, this.#httpService);\n\n        if (this.#destroyed) {\n            mapModel.destroy();\n            throw new Error(`MapRegistry has been destroyed.`);\n        }\n\n        const entry: ModelJobResult = { kind: \"model\", model: mapModel };\n        this.#entries.set(mapId, entry);\n        this.#modelCreationJobs.delete(mapId);\n        this.#modelsByOlMap.set(mapModel.olMap, mapModel);\n        return entry;\n    }\n}\n\nfunction unbox(entry: ModelJobResult): MapModelImpl {\n    if (entry.kind === \"error\") {\n        throw entry.error;\n    }\n    return entry.model;\n}\n"],"names":["entry"],"mappings":"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"}