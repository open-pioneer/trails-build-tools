{"version":3,"file":"WMTSLayerImpl.js","sources":["WMTSLayerImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger, isAbortError } from \"@open-pioneer/core\";\nimport Tile from \"ol/Tile\";\nimport TileState from \"ol/TileState\";\nimport WMTSCapabilities from \"ol/format/WMTSCapabilities\";\nimport TileLayer from \"ol/layer/Tile\";\nimport type TileSourceType from \"ol/source/Tile\";\nimport WMTS, { optionsFromCapabilities } from \"ol/source/WMTS\";\nimport { WMTSLayer, WMTSLayerConfig } from \"../../api\";\nimport { fetchCapabilities } from \"../../util/capabilities-utils\";\nimport { AbstractLayer } from \"../AbstractLayer\";\nimport { MapModelImpl } from \"../MapModelImpl\";\nimport { ImageTile } from \"ol\";\nimport type { Options as WMSSourceOptions } from \"ol/source/ImageWMS\";\n\nconst LOG = createLogger(\"map:WMTSLayer\");\n\nexport class WMTSLayerImpl extends AbstractLayer implements WMTSLayer {\n    #url: string;\n    #name: string;\n    #matrixSet: string;\n    #layer: TileLayer<TileSourceType>;\n    #source: WMTS | undefined;\n    #legend: string | undefined;\n    #sourceOptions?: Partial<WMSSourceOptions>;\n    readonly #abortController = new AbortController();\n\n    constructor(config: WMTSLayerConfig) {\n        const layer = new TileLayer();\n        super({\n            ...config,\n            olLayer: layer\n        });\n        this.#url = config.url;\n        this.#name = config.name;\n        this.#layer = layer;\n        this.#matrixSet = config.matrixSet;\n        this.#sourceOptions = config.sourceOptions;\n    }\n\n    destroy(): void {\n        super.destroy();\n        this.#abortController.abort();\n    }\n\n    get legend(): string | undefined {\n        return this.#legend;\n    }\n\n    __attach(map: MapModelImpl): void {\n        super.__attach(map);\n        this.#fetchWMTSCapabilities()\n            .then((result: string) => {\n                const parser = new WMTSCapabilities();\n                const capabilities = parser.read(result);\n                const options = optionsFromCapabilities(capabilities, {\n                    layer: this.#name,\n                    matrixSet: this.#matrixSet\n                });\n                if (!options) {\n                    throw new Error(\"Layer was not found in capabilities\");\n                }\n                const source = new WMTS({\n                    ...options,\n                    ...this.#sourceOptions,\n                    tileLoadFunction: (tile, tileUrl) => {\n                        this.#loadTile(tile, tileUrl);\n                    }\n                });\n                this.#source = source;\n                this.#layer.setSource(this.#source);\n                const activeStyleId = source.getStyle();\n                const legendUrl = getWMTSLegendUrl(capabilities, this.name, activeStyleId);\n                this.#legend = legendUrl;\n                this.__emitChangeEvent(\"changed:legend\");\n            })\n            .catch((error) => {\n                if (isAbortError(error)) {\n                    LOG.error(`Layer ${this.name} has been destroyed before fetching the data`);\n                    return;\n                }\n                LOG.error(`Failed fetching WMTS capabilities for Layer ${this.name}`, error);\n            });\n    }\n\n    get layer() {\n        return this.#layer;\n    }\n\n    get url() {\n        return this.#url;\n    }\n\n    get name() {\n        return this.#name;\n    }\n\n    get matrixSet() {\n        return this.#matrixSet;\n    }\n\n    get sublayers(): undefined {\n        return undefined;\n    }\n\n    async #fetchWMTSCapabilities(): Promise<string> {\n        const httpService = this.map.__sharedDependencies.httpService;\n        return fetchCapabilities(this.#url, httpService, this.#abortController.signal);\n    }\n\n    async #loadTile(tile: Tile, tileUrl: string): Promise<void> {\n        const httpService = this.map.__sharedDependencies.httpService;\n        try {\n            if (!(tile instanceof ImageTile)) {\n                throw new Error(\"Only 'ImageTile' is supported for now.\");\n            }\n\n            const image = tile.getImage();\n            if (!isHtmlImage(image)) {\n                // Could also be canvas or video\n                throw new Error(\"Only <img> tags are supported as tiles for now.\");\n            }\n\n            const response = await httpService.fetch(tileUrl);\n            if (!response.ok) {\n                throw new Error(`Tile request failed with status ${response.status}.`);\n            }\n\n            const blob = await response.blob();\n            const objectUrl = URL.createObjectURL(blob);\n            const finish = () => {\n                // Cleanup object URL after load to prevent memory leaks.\n                // https://stackoverflow.com/questions/62473876/openlayers-6-settileloadfunction-documented-example-uses-url-createobjecturld\n                URL.revokeObjectURL(objectUrl);\n                image.removeEventListener(\"load\", finish);\n                image.removeEventListener(\"error\", finish);\n            };\n            image.addEventListener(\"load\", finish);\n            image.addEventListener(\"error\", finish);\n            image.src = objectUrl;\n        } catch (e) {\n            tile.setState(TileState.ERROR);\n            if (!isAbortError(e)) {\n                LOG.error(\"Failed to load tile\", e);\n            }\n        }\n    }\n}\n\nfunction isHtmlImage(htmlElement: HTMLElement): htmlElement is HTMLImageElement {\n    return htmlElement.tagName === \"IMG\";\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport function getWMTSLegendUrl(\n    capabilities: Record<string, any>,\n    activeLayerId: string | undefined,\n    activeStyleId: string | undefined\n): string | undefined {\n    const content = capabilities?.Contents;\n    const layers = content?.Layer;\n\n    let activeLayer = layers?.find((layer: any) => layer?.Identifier === activeLayerId);\n    if (!activeLayer) {\n        LOG.debug(\"Failed to find the active layer in WMTS layer capabilities.\");\n        activeLayer = layers?.[0];\n        if (!activeLayer) {\n            LOG.debug(\"No layer in WMTS capabilities - giving up.\");\n            return undefined;\n        }\n    }\n\n    const styles = activeLayer.Style;\n    let activeStyle = styles?.find((style: any) => style?.Identifier === activeStyleId);\n    if (!activeStyle) {\n        LOG.debug(\"Failed to find active style in WMTS layer.\");\n        activeStyle = styles?.[0];\n        if (!activeStyle) {\n            LOG.debug(\"No style in WMTS layer capabilities - giving up.\");\n            return undefined;\n        }\n    }\n\n    const legendUrl = activeStyle.LegendURL?.[0]?.href;\n    return legendUrl as string | undefined;\n}\n"],"names":[],"mappings":"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"}