{"version":3,"file":"geometry-utils.js","sources":["geometry-utils.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { Extent, getHeight, getWidth } from \"ol/extent\";\n\nconst DEFAULT_BUFFER_FACTOR = 1.2;\n\n/**\n * Computes a buffered extent using the given original extent.\n *\n * Use the `factor` (`1.2` by default) to specify the size increase.\n */\nexport function calculateBufferedExtent(extent: Extent, factor = DEFAULT_BUFFER_FACTOR): Extent {\n    checkExtent(extent);\n    const width = getHeight(extent);\n    const height = getWidth(extent);\n    const bufferWidth = width * factor;\n    const bufferHeight = height * factor;\n    const bufferedExtent = [\n        extent[0] - (bufferWidth - width) / 2,\n        extent[1] - (bufferHeight - height) / 2,\n        extent[2] + (bufferWidth - width) / 2,\n        extent[3] + (bufferHeight - height) / 2\n    ];\n    return bufferedExtent;\n}\n\nfunction checkExtent(extent: Extent): asserts extent is [number, number, number, number] {\n    if (extent.length !== 4) {\n        throw new Error(`Invalid extent (expected length 4, but got length ${extent.length}).`);\n    }\n}\n"],"names":[],"mappings":";;AAIA,MAAM,qBAAA,GAAwB,GAAA;AAOvB,SAAS,uBAAA,CAAwB,MAAA,EAAgB,MAAA,GAAS,qBAAA,EAA+B;AAC5F,EAAA,WAAA,CAAY,MAAM,CAAA;AAClB,EAAA,MAAM,KAAA,GAAQ,UAAU,MAAM,CAAA;AAC9B,EAAA,MAAM,MAAA,GAAS,SAAS,MAAM,CAAA;AAC9B,EAAA,MAAM,cAAc,KAAA,GAAQ,MAAA;AAC5B,EAAA,MAAM,eAAe,MAAA,GAAS,MAAA;AAC9B,EAAA,MAAM,cAAA,GAAiB;AAAA,IACnB,MAAA,CAAO,CAAC,CAAA,GAAA,CAAK,WAAA,GAAc,KAAA,IAAS,CAAA;AAAA,IACpC,MAAA,CAAO,CAAC,CAAA,GAAA,CAAK,YAAA,GAAe,MAAA,IAAU,CAAA;AAAA,IACtC,MAAA,CAAO,CAAC,CAAA,GAAA,CAAK,WAAA,GAAc,KAAA,IAAS,CAAA;AAAA,IACpC,MAAA,CAAO,CAAC,CAAA,GAAA,CAAK,YAAA,GAAe,MAAA,IAAU;AAAA,GAC1C;AACA,EAAA,OAAO,cAAA;AACX;AAEA,SAAS,YAAY,MAAA,EAAoE;AACrF,EAAA,IAAI,MAAA,CAAO,WAAW,CAAA,EAAG;AACrB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kDAAA,EAAqD,MAAA,CAAO,MAAM,CAAA,EAAA,CAAI,CAAA;AAAA,EAC1F;AACJ;;;;"}