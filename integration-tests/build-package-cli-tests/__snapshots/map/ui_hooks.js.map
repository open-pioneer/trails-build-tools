{"version":3,"file":"hooks.js","sources":["hooks.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport { unByKey } from \"ol/Observable\";\nimport { Projection, getPointResolution } from \"ol/proj\";\nimport { Coordinate } from \"ol/coordinate\";\nimport { EventsKey } from \"ol/events\";\nimport { useCallback, useMemo, useSyncExternalStore } from \"react\";\n\n/**\n * From Web Map Server Implementation Specification -> 7.2.4.6.9 Scale denominators\n *\n * For the purposes of this International Standard, the common pixel size is defined to be 0,28 mm Ã— 0,28 mm.\n * Because arbitrary clients can request maps from a server, the true pixel size of the final rendering device is\n * unknown to the server.\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\nconst INCHES_PER_METRE = 39.37;\n\n/**\n * Returns the current view of the given map.\n */\nexport function useView(map: OlMap | undefined): OlView | undefined {\n    return useOlProperty(map, getView, watchView);\n}\n\nfunction getView(map: OlMap) {\n    return map.getView();\n}\n\nfunction watchView(map: OlMap, cb: Callback) {\n    return map.on(\"change:view\", cb);\n}\n\n/**\n * Returns the current projection of the map.\n */\nexport function useProjection(map: OlMap | undefined): Projection | undefined {\n    const view = useView(map);\n    return view?.getProjection();\n}\n\n/**\n * Returns the current resolution of the map.\n */\nexport function useResolution(map: OlMap | undefined): number | undefined {\n    const view = useView(map);\n    return useOlProperty(view, getResolution, watchResolution);\n}\n\nfunction getResolution(view: OlView): number | undefined {\n    return view.getResolution();\n}\n\nfunction watchResolution(view: OlView, cb: Callback) {\n    return view.on(\"change:resolution\", cb);\n}\n\n/**\n * Returns the current center coordinates of the map.\n */\nexport function useCenter(map: OlMap | undefined): Coordinate | undefined {\n    const view = useView(map);\n    return useOlProperty(view, getCenter, watchCenter);\n}\n\nfunction getCenter(view: OlView): Coordinate | undefined {\n    return view.getCenter();\n}\n\nfunction watchCenter(view: OlView, cb: Callback) {\n    return view.on(\"change:center\", cb);\n}\n\n/**\n * Returns the current scale of the map.\n */\nexport function useScale(map: OlMap | undefined): number | undefined {\n    const center = useCenter(map);\n    const resolution = useResolution(map);\n    const projection = useProjection(map);\n    const scale = useMemo(() => {\n        if (projection == null || resolution == null || center == null) {\n            return undefined;\n        }\n\n        /**\n         * Returns the appropriate scale for the given resolution and units, see OpenLayers function getScaleForResolution()\n         * https://github.com/openlayers/openlayers/blob/7fa9df03431e9e1bc517e6c414565d9f848a3132/src/ol/control/ScaleLine.js#L454C3-L454C24\n         */\n        const pointResolution = getPointResolution(projection, resolution, center);\n        const scale = Math.round(pointResolution * INCHES_PER_METRE * DEFAULT_DPI);\n        return scale;\n    }, [projection, resolution, center]);\n    return scale;\n}\n\ntype Callback = () => void;\n\n/**\n * Returns the value of an observable ol property.\n *\n * Make sure to keep `accessor` and `watcher` stable to reduce re-subscriptions:\n * either use global functions or wrap the functions into `useCallback`.\n */\nfunction useOlProperty<T, R>(\n    object: T | undefined,\n    accessor: (object: T) => R,\n    watcher: (object: T, cb: Callback) => EventsKey\n): R | undefined {\n    const getSnapshot = useCallback(\n        () => (object ? accessor(object) : undefined),\n        [object, accessor]\n    );\n    const subscribe = useCallback(\n        (cb: Callback) => {\n            if (!object) {\n                return () => undefined;\n            }\n\n            const key = watcher(object, cb);\n            return () => unByKey(key);\n        },\n        [object, watcher]\n    );\n    return useSyncExternalStore(subscribe, getSnapshot);\n}\n"],"names":["scale"],"mappings":"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"}