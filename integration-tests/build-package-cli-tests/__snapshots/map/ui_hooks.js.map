{"version":3,"file":"hooks.js","sources":["hooks.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport { unByKey } from \"ol/Observable\";\nimport { Projection, getPointResolution } from \"ol/proj\";\nimport { Coordinate } from \"ol/coordinate\";\nimport { EventsKey } from \"ol/events\";\nimport { useCallback, useMemo, useSyncExternalStore } from \"react\";\n\n/**\n * From Web Map Server Implementation Specification -> 7.2.4.6.9 Scale denominators\n *\n * For the purposes of this International Standard, the common pixel size is defined to be 0,28 mm Ã— 0,28 mm.\n * Because arbitrary clients can request maps from a server, the true pixel size of the final rendering device is\n * unknown to the server.\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\nconst INCHES_PER_METRE = 39.37;\n\n/**\n * Returns the current view of the given map.\n */\nexport function useView(map: OlMap | undefined): OlView | undefined {\n    return useOlProperty(map, getView, watchView);\n}\n\nfunction getView(map: OlMap) {\n    return map.getView();\n}\n\nfunction watchView(map: OlMap, cb: Callback) {\n    return map.on(\"change:view\", cb);\n}\n\n/**\n * Returns the current projection of the map.\n */\nexport function useProjection(map: OlMap | undefined): Projection | undefined {\n    const view = useView(map);\n    return view?.getProjection();\n}\n\n/**\n * Returns the current resolution of the map.\n */\nexport function useResolution(map: OlMap | undefined): number | undefined {\n    const view = useView(map);\n    return useOlProperty(view, getResolution, watchResolution);\n}\n\nfunction getResolution(view: OlView): number | undefined {\n    return view.getResolution();\n}\n\nfunction watchResolution(view: OlView, cb: Callback) {\n    return view.on(\"change:resolution\", cb);\n}\n\n/**\n * Returns the current center coordinates of the map.\n */\nexport function useCenter(map: OlMap | undefined): Coordinate | undefined {\n    const view = useView(map);\n    return useOlProperty(view, getCenter, watchCenter);\n}\n\nfunction getCenter(view: OlView): Coordinate | undefined {\n    return view.getCenter();\n}\n\nfunction watchCenter(view: OlView, cb: Callback) {\n    return view.on(\"change:center\", cb);\n}\n\n/**\n * Returns the current scale of the map.\n */\nexport function useScale(map: OlMap | undefined): number | undefined {\n    const center = useCenter(map);\n    const resolution = useResolution(map);\n    const projection = useProjection(map);\n    const scale = useMemo(() => {\n        if (projection == null || resolution == null || center == null) {\n            return undefined;\n        }\n\n        /**\n         * Returns the appropriate scale for the given resolution and units, see OpenLayers function getScaleForResolution()\n         * https://github.com/openlayers/openlayers/blob/7fa9df03431e9e1bc517e6c414565d9f848a3132/src/ol/control/ScaleLine.js#L454C3-L454C24\n         */\n        const pointResolution = getPointResolution(projection, resolution, center);\n        const scale = Math.round(pointResolution * INCHES_PER_METRE * DEFAULT_DPI);\n        return scale;\n    }, [projection, resolution, center]);\n    return scale;\n}\n\ntype Callback = () => void;\n\n/**\n * Returns the value of an observable ol property.\n *\n * Make sure to keep `accessor` and `watcher` stable to reduce re-subscriptions:\n * either use global functions or wrap the functions into `useCallback`.\n */\nfunction useOlProperty<T, R>(\n    object: T | undefined,\n    accessor: (object: T) => R,\n    watcher: (object: T, cb: Callback) => EventsKey\n): R | undefined {\n    const getSnapshot = useCallback(\n        () => (object ? accessor(object) : undefined),\n        [object, accessor]\n    );\n    const subscribe = useCallback(\n        (cb: Callback) => {\n            if (!object) {\n                return () => undefined;\n            }\n\n            const key = watcher(object, cb);\n            return () => unByKey(key);\n        },\n        [object, watcher]\n    );\n    return useSyncExternalStore(subscribe, getSnapshot);\n}\n"],"names":["scale"],"mappings":"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"}