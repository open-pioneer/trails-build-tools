{"version":3,"file":"WMSLayerImpl.js","sources":["WMSLayerImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger } from \"@open-pioneer/core\";\nimport ImageLayer from \"ol/layer/Image\";\nimport type ImageSource from \"ol/source/Image\";\nimport ImageWMS from \"ol/source/ImageWMS\";\nimport { Sublayer, WMSLayerConfig, WMSLayer, WMSSublayerConfig } from \"../../api\";\nimport { DeferredExecution, defer } from \"../../util/defer\";\nimport { AbstractLayer } from \"../AbstractLayer\";\nimport { AbstractLayerBase } from \"../AbstractLayerBase\";\nimport { MapModelImpl } from \"../MapModelImpl\";\nimport { SublayersCollectionImpl } from \"../SublayersCollectionImpl\";\n\nconst LOG = createLogger(\"map:WMSLayer\");\n\nexport class WMSLayerImpl extends AbstractLayer implements WMSLayer {\n    #url: string;\n    #sublayers: SublayersCollectionImpl<WMSSublayerImpl>;\n    #deferredSublayerUpdate: DeferredExecution | undefined;\n    #layer: ImageLayer<ImageSource>;\n    #source: ImageWMS;\n\n    constructor(config: WMSLayerConfig) {\n        const layer = new ImageLayer();\n        super({\n            ...config,\n            olLayer: layer\n        });\n        const source = new ImageWMS({\n            ...config.sourceOptions,\n            url: config.url,\n            params: {\n                ...config.sourceOptions?.params\n            }\n        });\n        this.#url = config.url;\n        this.#source = source;\n        this.#layer = layer;\n        this.#sublayers = new SublayersCollectionImpl(constructSublayers(config.sublayers));\n        this.#updateLayersParam();\n    }\n\n    get url(): string {\n        return this.#url;\n    }\n\n    get sublayers(): SublayersCollectionImpl<WMSSublayerImpl> {\n        return this.#sublayers;\n    }\n\n    __attach(map: MapModelImpl): void {\n        super.__attach(map);\n        for (const sublayer of this.#sublayers.getSublayers()) {\n            sublayer.__attach(map, this, this);\n        }\n    }\n\n    /** Called by the sublayers when their visibility changed. */\n    __updateSublayerVisibility() {\n        if (this.#deferredSublayerUpdate?.reschedule()) {\n            return;\n        }\n        this.#deferredSublayerUpdate = defer(() => {\n            try {\n                this.#updateLayersParam();\n                this.#deferredSublayerUpdate = undefined;\n            } catch (e) {\n                LOG.error(`Failed to update sublayer visibility on WMS layer '${this.id}'.`, e);\n            }\n        });\n    }\n\n    /**\n     * Gathers the visibility of _all_ sublayers and assembles the 'layers' WMS parameter.\n     * The parameters are then applied to the WMS source.\n     */\n    #updateLayersParam() {\n        const layers = this.#getVisibleLayerNames();\n        this.#source.updateParams({\n            \"LAYERS\": layers\n        });\n\n        // only set source if there are visible sublayers, otherwise\n        // we send an invalid http request\n        const source = layers.length === 0 ? null : this.#source;\n        if (this.#layer.getSource() !== source) {\n            this.#layer.setSource(source);\n        }\n    }\n\n    #getVisibleLayerNames() {\n        const layers: string[] = [];\n        const visitSublayer = (sublayer: WMSSublayerImpl) => {\n            if (!sublayer.visible) {\n                return;\n            }\n\n            const nestedSublayers = sublayer.sublayers.__getRawSublayers();\n            if (nestedSublayers.length) {\n                for (const nestedSublayer of nestedSublayers) {\n                    visitSublayer(nestedSublayer);\n                }\n            } else {\n                layers.push(sublayer.name);\n            }\n        };\n\n        for (const sublayer of this.sublayers.__getRawSublayers()) {\n            visitSublayer(sublayer);\n        }\n        return layers;\n    }\n}\n\nclass WMSSublayerImpl extends AbstractLayerBase implements Sublayer {\n    #parent: WMSSublayerImpl | WMSLayerImpl | undefined;\n    #parentLayer: WMSLayerImpl | undefined;\n    #name: string;\n    #sublayers: SublayersCollectionImpl<WMSSublayerImpl>;\n    #visible: boolean;\n\n    constructor(config: WMSSublayerConfig) {\n        super(config);\n        this.#name = config.name;\n        this.#visible = config.visible ?? true;\n        this.#sublayers = new SublayersCollectionImpl(constructSublayers(config.sublayers));\n    }\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get sublayers(): SublayersCollectionImpl<WMSSublayerImpl> {\n        return this.#sublayers;\n    }\n\n    get parent(): WMSSublayerImpl | WMSLayerImpl {\n        const parent = this.#parent;\n        if (!parent) {\n            throw new Error(`WMS sublayer ${this.id} has not been attached to its parent yet.`);\n        }\n        return parent;\n    }\n\n    get parentLayer(): WMSLayerImpl {\n        const parentLayer = this.#parentLayer;\n        if (!parentLayer) {\n            throw new Error(`WMS sublayer ${this.id} has not been attached to its parent yet.`);\n        }\n        return parentLayer;\n    }\n\n    /**\n     * Called by the parent layer when it is attached to the map to attach all sublayers.\n     */\n    __attach(\n        map: MapModelImpl,\n        parentLayer: WMSLayerImpl,\n        parent: WMSLayerImpl | WMSSublayerImpl\n    ): void {\n        super.__attachToMap(map);\n        if (this.#parent) {\n            throw new Error(\n                `WMS sublayer '${this.id}' has already been attached to parent '${this.#parent.id}'`\n            );\n        }\n        this.#parent = parent;\n        if (this.#parentLayer) {\n            throw new Error(\n                `WMS sublayer '${this.id}' has already been attached to parent layer '${\n                    this.#parentLayer.id\n                }'`\n            );\n        }\n        this.#parentLayer = parentLayer;\n\n        // Recurse into nested sublayers\n        for (const sublayer of this.sublayers.__getRawSublayers()) {\n            sublayer.__attach(map, parentLayer, this);\n        }\n    }\n\n    get visible(): boolean {\n        return this.#visible;\n    }\n\n    setVisible(newVisibility: boolean): void {\n        if (this.visible !== newVisibility) {\n            this.#visible = newVisibility;\n            this.#parentLayer?.__updateSublayerVisibility();\n            this.__emitChangeEvent(\"changed:visible\");\n        }\n    }\n}\n\nfunction constructSublayers(sublayerConfigs: WMSSublayerConfig[] = []): WMSSublayerImpl[] {\n    const sublayers: WMSSublayerImpl[] = [];\n    try {\n        for (const sublayerConfig of sublayerConfigs) {\n            sublayers.push(new WMSSublayerImpl(sublayerConfig));\n        }\n        return sublayers;\n    } catch (e) {\n        // Ensure previous sublayers are destroyed if a single constructor throws\n        while (sublayers.length) {\n            const layer = sublayers.pop()!;\n            layer?.destroy();\n        }\n        throw new Error(\"Failed to construct sublayers.\", { cause: e });\n    }\n}\n"],"names":[],"mappings":"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"}