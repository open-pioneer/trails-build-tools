{"version":3,"file":"WMSLayer.js","sources":["WMSLayer.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport type { Options as WMSSourceOptions } from \"ol/source/ImageWMS\";\nimport { WMSLayerImpl } from \"../../model/layers/WMSLayerImpl\";\nimport type { LayerBaseConfig, Layer, SublayersCollection, Sublayer, LayerConfig } from \"./base\";\n\n/**\n * Configuration options to construct a WMS layer.\n */\nexport interface WMSLayerConfig extends LayerConfig {\n    /** URL of the WMS service. */\n    url: string;\n\n    /** Configures the layer's sublayers. */\n    sublayers?: WMSSublayerConfig[];\n\n    /**\n     * Additional source options for the layer's WMS source.\n     *\n     * NOTE: These options are intended for advanced configuration:\n     * the WMS Layer manages some of the OpenLayers source options itself.\n     */\n    sourceOptions?: Partial<WMSSourceOptions>;\n}\n\n/**\n * Configuration options to construct the sublayers of a WMS layer.\n */\nexport interface WMSSublayerConfig extends LayerBaseConfig {\n    /**\n     * The name of the WMS sublayer in the service's capabilities.\n     * Not mandatory, e.g. for WMS group layer. See [WMS spec](https://www.ogc.org/standard/wms/).\n     */\n    name?: string;\n\n    /** Configuration for nested sublayers. */\n    sublayers?: WMSSublayerConfig[];\n}\n\n/** Represents a WMS layer. */\nexport interface WMSLayer extends Layer {\n    readonly sublayers: SublayersCollection<WMSSublayer>;\n\n    /** The URL of the WMS service that was used during layer construction. */\n    readonly url: string;\n}\n\n/** Represents a WMS sublayer */\nexport interface WMSSublayer extends Sublayer {\n    /**\n     * The name of the WMS sublayer in the service's capabilities.\n     *\n     * Is optional as a WMS group layer in a WMS service does not need to have a name.\n     */\n    readonly name: string | undefined;\n}\n\n/**\n * Constructor for {@link WMSLayer}.\n */\nexport interface WMSLayerConstructor {\n    prototype: WMSLayer;\n\n    /** Creates a new {@link WMSLayer}. */\n    new (config: WMSLayerConfig): WMSLayer;\n}\n\nexport const WMSLayer: WMSLayerConstructor = WMSLayerImpl;\n"],"names":[],"mappings":";;AAmEO,MAAM,QAAgC,GAAA;;;;"}