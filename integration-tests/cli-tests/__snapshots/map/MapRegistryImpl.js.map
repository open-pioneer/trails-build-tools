{"version":3,"file":"MapRegistryImpl.js","sources":["MapRegistryImpl.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2023 Open Pioneer project (https://github.com/open-pioneer)\n// SPDX-License-Identifier: Apache-2.0\nimport { createLogger } from \"@open-pioneer/core\";\nimport { Service, ServiceOptions, ServiceType } from \"@open-pioneer/runtime\";\nimport OlMap from \"ol/Map\";\nimport { MapModelImpl } from \"./model/MapModelImpl\";\nimport { MapConfigProvider, MapModel, MapRegistry } from \"./api\";\nimport { createMapModel } from \"./model/createMapModel\";\n\nconst LOG = createLogger(\"map:MapRegistry\");\n\ninterface References {\n    providers: ServiceType<\"map.MapConfigProvider\">[];\n}\n\ntype ModelJobResult = { kind: \"model\"; model: MapModelImpl } | { kind: \"error\"; error: Error };\n\nexport class MapRegistryImpl implements Service, MapRegistry {\n    #configProviders = new Map<string, MapConfigProvider>();\n    #entries = new Map<string, ModelJobResult>();\n    #modelCreationJobs = new Map<string, Promise<ModelJobResult>>();\n    #modelsByOlMap = new WeakMap<OlMap, MapModel>();\n    #destroyed = false;\n\n    constructor(options: ServiceOptions<References>) {\n        const providers = options.references.providers;\n        for (const provider of providers) {\n            this.#configProviders.set(provider.mapId, provider);\n        }\n    }\n\n    destroy(): void {\n        if (this.#destroyed) {\n            return;\n        }\n\n        LOG.info(`Destroy map registry and all maps`);\n        this.#destroyed = true;\n        this.#entries.forEach((model) => {\n            model.kind === \"model\" && model.model.destroy();\n        });\n        this.#entries.clear();\n        this.#modelCreationJobs.clear();\n    }\n\n    async getMapModel(mapId: string): Promise<MapModel | undefined> {\n        if (this.#destroyed) {\n            throw new Error(\"MapRegistry has already been destroyed.\");\n        }\n\n        const creationJob = this.#modelCreationJobs.get(mapId);\n        if (creationJob) {\n            return unbox(await creationJob);\n        }\n\n        const entry = this.#entries.get(mapId);\n        if (entry) {\n            return unbox(entry);\n        }\n\n        const provider = this.#configProviders.get(mapId);\n        if (!provider) {\n            LOG.debug(`Failed to find a config provider for map id '${mapId}'.`);\n            return undefined;\n        }\n\n        const modelPromise = this.#createModel(mapId, provider).catch((cause) => {\n            const error = new Error(`Failed to construct map '${mapId}'`, { cause });\n            const entry: ModelJobResult = { kind: \"error\", error };\n            this.#modelCreationJobs.delete(mapId);\n            this.#entries.set(mapId, entry);\n            return entry;\n        });\n        this.#modelCreationJobs.set(mapId, modelPromise);\n        return unbox(await modelPromise);\n    }\n\n    async expectMapModel(mapId: string): Promise<MapModel> {\n        const model = await this.getMapModel(mapId);\n        if (!model) {\n            throw new Error(`No configuration available for map with id '${mapId}'.`);\n        }\n        return model;\n    }\n\n    getMapModelByRawInstance(olMap: OlMap): MapModel | undefined {\n        return this.#modelsByOlMap.get(olMap);\n    }\n\n    async #createModel(mapId: string, provider: MapConfigProvider): Promise<ModelJobResult> {\n        LOG.info(`Creating map with id '${mapId}'`);\n        const mapConfig = await provider.getMapConfig();\n        const mapModel = await createMapModel(mapId, mapConfig);\n\n        if (this.#destroyed) {\n            mapModel.destroy();\n            throw new Error(`MapRegistry has been destroyed.`);\n        }\n\n        const entry: ModelJobResult = { kind: \"model\", model: mapModel };\n        this.#entries.set(mapId, entry);\n        this.#modelCreationJobs.delete(mapId);\n        this.#modelsByOlMap.set(mapModel.olMap, mapModel);\n        return entry;\n    }\n}\n\nfunction unbox(entry: ModelJobResult): MapModelImpl {\n    if (entry.kind === \"error\") {\n        throw entry.error;\n    }\n    return entry.model;\n}\n"],"names":["entry"],"mappings":"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"}